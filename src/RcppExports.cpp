// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// findLambdaWithToms748
double findLambdaWithToms748(const arma::vec& singular_values, const double& degrees_of_freedom, const double& lower_bound, const double& upper_bound);
RcppExport SEXP _compboostSplines_findLambdaWithToms748(SEXP singular_valuesSEXP, SEXP degrees_of_freedomSEXP, SEXP lower_boundSEXP, SEXP upper_boundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type singular_values(singular_valuesSEXP);
    Rcpp::traits::input_parameter< const double& >::type degrees_of_freedom(degrees_of_freedomSEXP);
    Rcpp::traits::input_parameter< const double& >::type lower_bound(lower_boundSEXP);
    Rcpp::traits::input_parameter< const double& >::type upper_bound(upper_boundSEXP);
    rcpp_result_gen = Rcpp::wrap(findLambdaWithToms748(singular_values, degrees_of_freedom, lower_bound, upper_bound));
    return rcpp_result_gen;
END_RCPP
}
// demmlerReinsch
double demmlerReinsch(const arma::mat& XtX, const arma::mat& penalty_mat, const double& degrees_of_freedom);
RcppExport SEXP _compboostSplines_demmlerReinsch(SEXP XtXSEXP, SEXP penalty_matSEXP, SEXP degrees_of_freedomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type XtX(XtXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type penalty_mat(penalty_matSEXP);
    Rcpp::traits::input_parameter< const double& >::type degrees_of_freedom(degrees_of_freedomSEXP);
    rcpp_result_gen = Rcpp::wrap(demmlerReinsch(XtX, penalty_mat, degrees_of_freedom));
    return rcpp_result_gen;
END_RCPP
}
// penaltyMat
arma::mat penaltyMat(const unsigned int& nparams, const unsigned int& differences);
RcppExport SEXP _compboostSplines_penaltyMat(SEXP nparamsSEXP, SEXP differencesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int& >::type nparams(nparamsSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type differences(differencesSEXP);
    rcpp_result_gen = Rcpp::wrap(penaltyMat(nparams, differences));
    return rcpp_result_gen;
END_RCPP
}
// findSpan
unsigned int findSpan(const double& x, const arma::vec& knots);
RcppExport SEXP _compboostSplines_findSpan(SEXP xSEXP, SEXP knotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type knots(knotsSEXP);
    rcpp_result_gen = Rcpp::wrap(findSpan(x, knots));
    return rcpp_result_gen;
END_RCPP
}
// createKnots
arma::vec createKnots(const arma::vec& values, const unsigned int& n_knots, const unsigned int& degree);
RcppExport SEXP _compboostSplines_createKnots(SEXP valuesSEXP, SEXP n_knotsSEXP, SEXP degreeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type n_knots(n_knotsSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type degree(degreeSEXP);
    rcpp_result_gen = Rcpp::wrap(createKnots(values, n_knots, degree));
    return rcpp_result_gen;
END_RCPP
}
// createSplineBasis
arma::mat createSplineBasis(const arma::vec& values, const unsigned int& degree, const arma::vec& knots);
RcppExport SEXP _compboostSplines_createSplineBasis(SEXP valuesSEXP, SEXP degreeSEXP, SEXP knotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type knots(knotsSEXP);
    rcpp_result_gen = Rcpp::wrap(createSplineBasis(values, degree, knots));
    return rcpp_result_gen;
END_RCPP
}
// createSparseSplineBasis
arma::sp_mat createSparseSplineBasis(arma::vec& values, const unsigned int& degree, const arma::vec& knots);
RcppExport SEXP _compboostSplines_createSparseSplineBasis(SEXP valuesSEXP, SEXP degreeSEXP, SEXP knotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type knots(knotsSEXP);
    rcpp_result_gen = Rcpp::wrap(createSparseSplineBasis(values, degree, knots));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_compboostSplines_findLambdaWithToms748", (DL_FUNC) &_compboostSplines_findLambdaWithToms748, 4},
    {"_compboostSplines_demmlerReinsch", (DL_FUNC) &_compboostSplines_demmlerReinsch, 3},
    {"_compboostSplines_penaltyMat", (DL_FUNC) &_compboostSplines_penaltyMat, 2},
    {"_compboostSplines_findSpan", (DL_FUNC) &_compboostSplines_findSpan, 2},
    {"_compboostSplines_createKnots", (DL_FUNC) &_compboostSplines_createKnots, 3},
    {"_compboostSplines_createSplineBasis", (DL_FUNC) &_compboostSplines_createSplineBasis, 3},
    {"_compboostSplines_createSparseSplineBasis", (DL_FUNC) &_compboostSplines_createSparseSplineBasis, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_compboostSplines(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
